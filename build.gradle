buildscript {
	ext {
		springBootVersion = '1.5.2.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

//It is possible to change the layout of folders
sourceSets{
	main{
		java{
			srcDir 'src/java'
		}

		respirces {
			srcDir 'src/resources'
		}
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	//jcenter() -> https
	//url "http:// .."
	//mavenLocal()
}

/**
 * There are four configuration
 * 1 compile
 * 2 runtime
 * 3 testcompile
 * 4 testruntime
 */
dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-jersey')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-validation')
	compile('org.springframework.boot:spring-boot-starter-web')
	compileOnly('org.projectlombok:lombok')
	runtime('org.hsqldb:hsqldb')
	//it is not needed on the application itself
	testCompile('org.springframework.boot:spring-boot-starter-test')

	//If dependency is local:
	// compile files ('lib/log4j.jar', 'lib/junit.jar')

	//to download from maven repository
	//compile group: 'log4j', name: 'log4j', version: '1.2.17'
	//compile 'junit:junit:4.12'
	}

//Transitive dependencies :  when your dependency depends on others.

//To list the depencencies - gradle -q dependencie |-configuration compile|

def projectVersion = "2.0"

//add-hoc tasks
task hello{
}

hello << {println "this is the first taks that is the hello workd $projectVersion"}

project.task("task1")
task1.description="this is a simple description"
task1.doLast{println "this is task 1"}

task1.dependsOn hello

//typed task

//gradle --daemon build : reuse the same jvm that is already in place, which will save a lot of time.
//it can also be configured in the gradle.build

//task1.shouldRunAfter hello
//task1.mustRunAfter hello
//task1.finalizedBy hello


//#To create a multy project build, it is necessary to create another file called
// settings.gradle with the list of all the projects in the build
// Also it is necessary to add top level build.gradle



//FILTERING
test{
	filter{
		includeTestsMatching "com.test"
		includeTestsMatching "*shouldCreateEntity"
	}
}

//to run this filter - gradle test --tests *include TestsMatching


//INTEGRATION TESTS?
//gradle-testsets-plugin




//CI on teamcity.com